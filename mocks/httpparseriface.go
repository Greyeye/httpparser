// Code generated by MockGen. DO NOT EDIT.
// Source: httpparser.go

// Package mock_httpparser is a generated GoMock package.
package mock_httpparser

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockHTTPParseriface is a mock of HTTPParseriface interface
type MockHTTPParseriface struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPParserifaceMockRecorder
}

// MockHTTPParserifaceMockRecorder is the mock recorder for MockHTTPParseriface
type MockHTTPParserifaceMockRecorder struct {
	mock *MockHTTPParseriface
}

// NewMockHTTPParseriface creates a new mock instance
func NewMockHTTPParseriface(ctrl *gomock.Controller) *MockHTTPParseriface {
	mock := &MockHTTPParseriface{ctrl: ctrl}
	mock.recorder = &MockHTTPParserifaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPParseriface) EXPECT() *MockHTTPParserifaceMockRecorder {
	return m.recorder
}

// JSONParse mocks base method
func (m *MockHTTPParseriface) JSONParse(ctx context.Context, req *http.Request) (*map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONParse", ctx, req)
	ret0, _ := ret[0].(*map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONParse indicates an expected call of JSONParse
func (mr *MockHTTPParserifaceMockRecorder) JSONParse(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONParse", reflect.TypeOf((*MockHTTPParseriface)(nil).JSONParse), ctx, req)
}

// HTTPGet mocks base method
func (m *MockHTTPParseriface) HTTPGet(ctx context.Context, req *http.Request) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPGet", ctx, req)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTTPGet indicates an expected call of HTTPGet
func (mr *MockHTTPParserifaceMockRecorder) HTTPGet(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPGet", reflect.TypeOf((*MockHTTPParseriface)(nil).HTTPGet), ctx, req)
}

// NewHttpParser mocks base method
func (m *MockHTTPParseriface) NewHttpParser(ctx context.Context, timeout time.Duration, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewHttpParser", ctx, timeout, req)
}

// NewHttpParser indicates an expected call of NewHttpParser
func (mr *MockHTTPParserifaceMockRecorder) NewHttpParser(ctx, timeout, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHttpParser", reflect.TypeOf((*MockHTTPParseriface)(nil).NewHttpParser), ctx, timeout, req)
}
