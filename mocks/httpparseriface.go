// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HTTPParseriface is an autogenerated mock type for the HTTPParseriface type
type HTTPParseriface struct {
	mock.Mock
}

// HTTPGet provides a mock function with given fields: ctx, req
func (_m *HTTPParseriface) HTTPGet(ctx context.Context, req *http.Request) ([]byte, error) {
	ret := _m.Called(ctx, req)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) []byte); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JSONParse provides a mock function with given fields: ctx, req
func (_m *HTTPParseriface) JSONParse(ctx context.Context, req *http.Request) (*map[string]interface{}, error) {
	ret := _m.Called(ctx, req)

	var r0 *map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) *map[string]interface{}); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
